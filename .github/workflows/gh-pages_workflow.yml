on:
  push:
    # Sequence of patterns matched against refs/tags
    branches:
      - dev/action_to_gh-pages

name: Build Connectors and Create Release

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: NgrokPre
      run: if grep pre .github/ngrok ; then bash .github/debug-github-actions.sh ; fi
      env:
        NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}
        USER_PASS: ${{ secrets.USER_PASS }}
    - name: WaitPre
      run: if grep pre .github/ngrok ; then bash .github/wait.sh ; fi

    - name: Checkout to github-pages branch
      id: checkout_to_gh_pages_branch
      env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          BRANCH_NAME: 'gh-pages' 
      run: |
          #!/bin/sh
          # check values
          if [ -z "${GITHUB_TOKEN}" ]; then
              echo "error: not found GITHUB_TOKEN"
              exit 1
          fi
          if [ -z "${BRANCH_NAME}" ]; then
             export BRANCH_NAME=master
          fi
          
          remote_repo="https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git config http.sslVerify false
          git config user.name "Automated Publisher"
          git config user.email "actions@users.noreply.github.com"
          git remote add publisher "${remote_repo}"
          git show-ref # useful for debugging
          git fetch
          git branch --verbose
          
          git lfs install
          
          git checkout ${BRANCH_NAME}
          git stash
          
          rm -rf ./*
          git status
          git add -A
          git commit -m "Cleaned GithubPages"
          
          git checkout ${GITHUB_REF}          
          
   
    - name: Build excel.node-10 connector
      id: build
      shell: bash
      run: |
        cd excel.node* && ./build.sh
        ZIP_NAME=$(ls excel.node*.zip)
        ZIP_PATH=$(realpath excel.node*.zip)
        echo ::set-output name=zip_name::${ZIP_NAME}
        echo ::set-output name=zip_path::${ZIP_PATH}
        cd ..
  
    - name: Build database.php-7.4 connector
      id: build_php
      shell: bash
      run: |
        cd database.php* && ./build.sh
        ZIP_PHP_NAME=$(ls database.php*.zip)
        ZIP_PHP_PATH=$(realpath database.php*.zip)
        echo ::set-output name=zip_php_name::${ZIP_PHP_NAME}
        echo ::set-output name=zip_php_path::${ZIP_PHP_PATH}
        cd ..

    - name: Build graphql.python-3 connector
      id: build_python
      shell: bash
      run: |
        cd graphql.python* && ./build.sh
        ZIP_PYTHON_NAME=$(ls graphql.python*.zip)
        ZIP_PYTHON_PATH=$(realpath graphql.python*.zip)
        echo ::set-output name=zip_python_name::${ZIP_PYTHON_NAME}
        echo ::set-output name=zip_python_path::${ZIP_PYTHON_PATH}
        cd ..

    - name: Build Node-GoogleSheet
      id: build_node_googlesheet
      shell: bash
      run: |
        cd googlesheet.node* && ./build.sh
        ZIP_NODE_GOOGLESHEET_NAME=$(ls googlesheet.node*.zip)
        ZIP_NODE_GOOGLESHEET_PATH=$(realpath googlesheet.node*.zip)
        echo ::set-output name=zip_node_googlesheet_name::${ZIP_NODE_GOOGLESHEET_NAME}
        echo ::set-output name=zip_node_googlesheet_path::${ZIP_NODE_GOOGLESHEET_PATH}
        cd ..        

    - name: Build Go-Mongo
      id: build_go_mongo
      shell: bash
      run: |
        cd mongo.go && bash build.sh
        ZIP_GO_NAME=$(ls mongo.go*.zip)
        ZIP_GO_PATH=$(realpath mongo.go*.zip)
        echo ::set-output name=zip_go_name::${ZIP_GO_NAME}
        echo ::set-output name=zip_go_path::${ZIP_GO_PATH}
        cd ..
        
    - name: Install java
      uses: actions/setup-java@v1
      with:
        java-version: 8

    - name: Build database.java-8 connector
      id: build_java
      run: |
        cd database.java* && make test && make release_mysql && make release_oracle && make release_sqlserver && make release_postgresql
        MYSQLPATH=$(realpath build/distributions/mysql.java*.zip)
        MYSQLNAME=$(basename build/distributions/mysql.java*.zip)
        ORACLEPATH=$(realpath build/distributions/oracle.java*.zip)
        ORACLENAME=$(basename build/distributions/oracle.java*.zip)
        SQLSERVERPATH=$(realpath build/distributions/sqlserver.java*.zip)
        SQLSERVERNAME=$(basename build/distributions/sqlserver.java*.zip)
        POSTGRESQLPATH=$(realpath build/distributions/postgresql.java*.zip)
        POSTGRESQLNAME=$(basename build/distributions/postgresql.java*.zip)
        echo ::set-output name=mysql_path::${MYSQLPATH}
        echo ::set-output name=mysql_name::${MYSQLNAME}
        echo ::set-output name=oracle_path::${ORACLEPATH}
        echo ::set-output name=oracle_name::${ORACLENAME}
        echo ::set-output name=sqlserver_path::${SQLSERVERPATH}
        echo ::set-output name=sqlserver_name::${SQLSERVERNAME}
        echo ::set-output name=postgresql_path::${POSTGRESQLPATH}
        echo ::set-output name=postgresql_name::${POSTGRESQLNAME}
    
    - name: Create Connectors Json
      id: create_connectors_json
      run: |
        ASSETS=$(find . -type f -name '*.zip' -exec ls {} \;)
        PREFIX="["
        DATA=""
        for asset in $ASSETS
        do
          filename=$( basename $asset)
          config=$( cat $( echo "$asset" | cut -d "/" -f2)/ow_config.json )
          DATA="$DATA{\"name\":\"${filename}\",\"file_path\":\"${asset}\",\"config\":${config}},"
        done
        POSTFIX="]"
        DATA=${DATA::${#DATA}-1}
        OUTPUT="$PREFIX$DATA$POSTFIX"
        
        echo $OUTPUT > index.json
        
    - name: Add Binary Connectors to Repo
      id: add_binary_connectors_to_repo
      env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          BRANCH_NAME: 'gh-pages' 
      run: |
          #!/bin/sh
          # check values
          if [ -z "${GITHUB_TOKEN}" ]; then
              echo "error: not found GITHUB_TOKEN"
              exit 1
          fi
          if [ -z "${BRANCH_NAME}" ]; then
             export BRANCH_NAME=master
          fi
          
          find . -type f -name 'package-lock.json' -exec rm -f {} \;
          git checkout ${BRANCH_NAME}
            
          git add index.json
          git add *.zip
          timestamp=$(date -u)
          git commit -m "Automated publish: ${timestamp} ${GITHUB_SHA}" || exit 0
          git pull --rebase publisher ${BRANCH_NAME}
          git push publisher ${BRANCH_NAME}

    - name: NgrokPost
      run: if grep post .github/ngrok ; then bash .github/debug-github-actions.sh ; fi
      env:
        NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}
        USER_PASS: ${{ secrets.USER_PASS }}
    - name: WaitPost
      run: if grep post .github/ngrok ; then bash .github/wait.sh ; fi
